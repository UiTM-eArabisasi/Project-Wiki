var vowelPrev = !1; function SuperTrim(a) { return a = a || "", ret = a.replace(/^\s*|\s*$/g, "").replace(/\s+/g, " "), ret } function findstr(a, b) { for (var c = 0; c < a.length; c++)if (a[c] == b) return !0; return !1 } function isDigit(b) { return findstr("0123456789", b) } function isPunct(b) { return findstr(",.><?/+=-_}{[]*&^%$#@!~`\"\\|:;()", b) } function isVowel(b) { return findstr("AaEe\xC8\xE8\xC9\xE9IiOoUu\xCA\xEA\u011A\u011B\u0114\u0115\u1E5A\u1E5BXx\xF4\xE2\u0101\u012B\u016B\u014D", b) } function isConsonant(b) { return findstr("BCDfGHJKLMNPRSTVWYZbcdfghjklmnpqrstvwxyz\u1E0C\u1E0D\u1E46\u1E47\u1E62\u1E63\u1E6C\u1E6D\u014A\u014B\xD1\xF1\u0272", b) } function isSpecial(b) { return findstr("GgHhRrYy\xF1", b) } function isHR(b) { return findstr("HhRr\u014A\u014B", b) } function isLW(b) { return findstr("LlWw", b) } function isCJ(b) { return findstr("CcJj", b) } function GetMatra(a) { var b = 0; if (1 > a.length) return ""; for (; "h" == a[b] && (b++, !(b >= a.length));); b < a.length && (a = a.substring(b)); var c, d, e = document.getElementsByName("mode"); for (var f in e) e[f].checked && (d = e[f].value); return c = "kopas" == d ? { ā: "\u0627", â: "\u0627", e: "", è: "", é: "", i: "\u064A", ī: "\u064A", u: "\u0627\u0648", ū: "\u0648", o: "\u0627\u0648", x: "", ě: "", ĕ: "", ê: "", ō: "\u0627\u0648", ô: "\u0627\u0648", A: "\u0627", E: "", È: "", É: "", I: "\uA986", U: "\u0627\u0648", O: "\uA98E", X: "", Ě: "", Ê: "", ṛ: "\uA9BD", aa: "\u0627", ai: "\u0627\u064A", au: "\u0627\u0648", ii: "\u064A", uu: "\u0627\u0648" } : { ā: "\u0627", â: "\u0627", e: "", è: "", é: "", i: "\u064A", ī: "\u064A", o: "\u0627\u0648", u: "\u0627\u0648", ū: "\u0648", x: "", ě: "", ĕ: "", ê: "", ō: "\u0627\u0648", ô: "\u0627\u0648", A: "\u0627", E: "", È: "", É: "", I: "\uA986", U: "\u0627\u0648", O: "\uA98E", X: "", Ě: "", Ê: "", ṛ: "\uA9BD", aa: "\u0627", ai: "\u0627\u064A", au: "\u0627\u0648", ii: "\u064A", uu: "\u0627\u0648" }, void 0 === c[a] ? "" : c[a] } function GetShift(a) { if (a = a.toLowerCase(), 0 == a.indexOf("nk")) return { CoreSound: "\u0646\u06A9", len: 2 }; if (1 == a.indexOf("k")) return { CoreSound: "" + GetCoreSound(a[0]).CoreSound + "\u06A9", len: 2 }; if (1 < a.indexOf("k")) { var b = "", d = 0, e = 0; for (e = 0; e < a.length; e++) { var f = a[e]; if (!isVowel(f)) b += ResolveCharacterSound(f), d++; else break } return { CoreSound: b, len: d } } if (0 == a.indexOf("mp")) return { CoreSound: "\u0645\u06A4", len: 2 }; if (1 == a.indexOf("p")) return { CoreSound: "" + GetCoreSound(a[0]).CoreSound + "\u0641", len: 2 }; if (1 == a.indexOf("ll")) return { CoreSound: "" + GetCoreSound(a[0]).CoreSound + "\u0644\u0644", len: 2 }; if (1 < a.indexOf("p")) { var b = "", d = 0, e = 0; for (e = 0; e < a.length; e++) { var f = a[e]; if (!isVowel(f)) b += ResolveCharacterSound(f), d++; else break } return { CoreSound: b, len: d } } if (0 == a.indexOf("ng")) return { CoreSound: "\u06A0", len: 2 }; if (1 == a.indexOf("g")) return { CoreSound: "" + GetCoreSound(a[0]).CoreSound + "\u0762", len: 2 }; if (1 < a.indexOf("g")) { var b = "", d = 0, e = 0; for (e = 0; e < a.length; e++) { var f = a[e]; if (!isVowel(f)) b += ResolveCharacterSound(f), d++; else break } return { CoreSound: b, len: d } } if (0 == a.indexOf("ny")) return { CoreSound: "\u06BD", len: 2 }; if (1 == a.indexOf("y")) return { CoreSound: "" + GetCoreSound(a[0]).CoreSound + "\u064A", len: 2 }; if (1 < a.indexOf("y")) { var b = "", d = 0, e = 0; for (e = 0; e < a.length; e++) { var f = a[e]; if (!isVowel(f)) b += ResolveCharacterSound(f), d++; else break } return { CoreSound: b, len: d } } if (0 == a.indexOf("nr")) return { CoreSound: "\u0646\u0631", len: 2 }; if (1 == a.indexOf("r")) return { CoreSound: "" + GetCoreSound(a[0]).CoreSound + "\u0631", len: 2 }; if (1 < a.indexOf("r")) { var b = "", d = 0, e = 0; for (e = 0; e < a.length; e++) { var f = a[e]; if (!isVowel(f)) b += ResolveCharacterSound(f), d++; else break } return { CoreSound: b, len: d } } if (0 == a.indexOf("nc")) return { CoreSound: "\u0646\u0686", len: 2 }; if (1 == a.indexOf("c")) return { CoreSound: "" + GetCoreSound(a[0]).CoreSound + "\u0686", len: 2 }; if (1 < a.indexOf("c")) { var b = "", d = 0, e = 0; for (e = 0; e < a.length; e++) { var f = a[e]; if (!isVowel(f)) b += ResolveCharacterSound(f), d++; else break } return { CoreSound: b, len: d } } return { CoreSound: null, len: 1 } } function GetCoreSound(a) { var b, c, d = document.getElementsByName("murda"); for (var e in d) d[e].checked && (c = d[e].value); b = "pakai" == c ? { A: "\u0627", B: "\u0628", C: "\u0686", D: "\u062F", E: "", F: "\u0641", G: "\u0762", H: "\u0647", I: "\u0627\u1A17", J: "\u062C", K: "\u06A9", L: "\u0644", M: "\u0645", N: "\u0646", O: "\u0627\u1A1A", P: "\u06A4", Q: "\u0642", R: "\u0631", S: "\u0633", T: "\u062A", U: "\u0627\u1A18", V: "\u06CF", W: "\u0648", X: "\u0627\u06A9\u0633", Y: "\u064A", Z: "\u0632", "​": " ", a: "\u0627", b: "\u0628", c: "\u0686", d: "\u062F", e: "\u0627\u1A1B", f: "\u0641", g: "\u0762", h: "\u0647", i: "\u0627\u1A17", j: "\u062C", k: "\u06A9", l: "\u0644", m: "\u0645", n: "\u0646", o: "\u0627", p: "\u06A4", q: "\u0642", r: "\u0631", s: "\u0633", t: "\u062A", u: "\u0627\u0648", v: "\u06CF", w: "\u0648", x: "\u0627\u06A9\u0633", y: "\u064A", z: "\u0632", È: "\u0627\u06A9\u0633", É: "\u0627\u06A9\u0633", è: "\u0627\u06A9\u0633", é: "\u0627\u06A9\u0633" } : { A: "\u0627", B: "\u0628", C: "\u0686", D: "\u062F", E: "\u0627\u1A1B", F: "\u0641", G: "\u0762", H: "\u0647", I: "\u0627\u1A17", J: "\u062C", K: "\u06A9", L: "\u0644", M: "\u0645", N: "\u0646", O: "\u0627\u1A1A", P: "\u06A4", Q: "\u0642", R: "\u0631", S: "\u0633", T: "\u062A", U: "\u0627\u1A18", V: "\u06CF", W: "\u0648", X: "\u06A9\u0633", Y: "\u064A", Z: "\u0632", "​": " ", a: "\u0627", b: "\u0628", c: "\u0686", d: "\u062F", e: "", f: "\u0641", g: "\u0762", h: "\u0647", i: "\u0627\u1A17", j: "\u062C", k: "\u06A9", l: "\u0644", m: "\u0645", n: "\u0646", o: "\u0627", p: "\u06A4", q: "\u0642", r: "\u0631", s: "\u0633", t: "\u062A", u: "\u0627\u0648", v: "\u06CF", w: "\u0648", x: "\u0627\u06A9\u0633", y: "\u064A", z: "\u0632", È: "\u06A9\u0633", É: "\u06A9\u0633", è: "\u06A9\u0633", é: "\u06A9\u0633" }; var f = GetShift(a), g = a; return null == f.CoreSound ? (b[a.charAt(0)] && (g = b[a.charAt(0)]), { CoreSound: g, len: 1 }) : f } function ResolveCharacterSound(a) { var b = "" + a; return isDigit(a) ? "" + (a - "0") : isConsonant(b[0]) ? "" + GetCoreSound(b).CoreSound + "" : "" + GetCoreSound(b).CoreSound } function GetSound(a) { if (a = SuperTrim(a), null == a || "" == a) return ""; if (1 == a.length) return ResolveCharacterSound(a[0]); var b = GetCoreSound(a), c = "", d = ""; return c = 1 <= b.len ? GetMatra(a.substring(b.len)) : "", 0 == a.indexOf("nggr") ? vowelPrev && (d = "\u06A0\u0762\u0631") : 0 == a.indexOf("ngg") ? vowelPrev && (d = "\u06A0\u0762") : 0 == a.indexOf("njl") ? d = "\u0646\u062C\u0644" : 0 == a.indexOf("njr") ? d = "\u06A0\u0762" : 0 == a.indexOf("ngg") ? vowelPrev && (d = "\u06A0\u0762") : "\u1B26\u1B1C\u1B44\u1B18" == b.CoreSound ? d = "\u06BD\u0686" : "\u1B26\u1B1C\u1B44\u1B1A\u1B44\u1B2E" == b.CoreSound ? d = "\u0646\u062C\u0644" : "\u1B26\u1B1C\u1B44\u1B1A" == b.CoreSound ? d = "\u1B1C\u1B44\u1B1A\u1B44\u1B2D" : "\u1B26\u1B1C\u1B44\u1B1A" == b.CoreSound ? d = "\u1B1C\u1B44\u1B1A" : "\u1B24\u1B1F\u1B44\u1B2F" == b.CoreSound ? d = "\u1B1F\u1B44\u1B2F" : "\u1B24\u1B1F" == b.CoreSound ? d = "\u1B1F" : "\u1B22\u1B1D\u1B44\u1B2F" == b.CoreSound ? d = "\u1B1D\u1B44\u1B2F" : "\u1B22\u1B1D" == b.CoreSound ? d = "\u1B1D" : findstr(b.CoreSound, "") && "\u1B44" == c ? (d = b.CoreSound, c = "") : findstr(b.CoreSound, "") && "\u1B44" == c ? (d = b.CoreSound, c = "\u1B44\u1B2D") : findstr(b.CoreSound, "\u1B44\u1B2D") && "\u1B42" == c ? "n" == a[0] && "y" == a[1] || ("t" == a[0] || "d" == a[0]) && "h" == a[1] ? (d = GetCoreSound(a[0] + a[1]).CoreSound + "", c = "") : "n" == a[0] && "g" == a[1] ? (d = "g" == a[2] ? "\u1B17\u1B44\u1B15" : "\u1B17", c = "") : (d = GetCoreSound(a[0]).CoreSound + "", c = "") : findstr(b.CoreSound, "\u1B2E") && "\u1B42" == c ? "n" == a[0] && "y" == a[1] || ("t" == a[0] || "d" == a[0]) && "h" == a[1] ? (d = GetCoreSound(a[0] + a[1]).CoreSound + "\u1B44\u1B2E\u1B42", c = "") : "n" == a[0] && "g" == a[1] ? (d = "g" == a[2] ? "\u1B17\u1B44\u1B15\u1B44\u1B2E\u1B42" : "\u1B17\u1B44\u1B2E\u1B42", c = "") : "l" == a[0] ? (d = "\u1B0D", c = "") : (d = GetCoreSound(a[0]).CoreSound + "\u1B44\u1B2E\u1B42", c = "") : "\u1B1D\u1B44\u1B2D" == b.CoreSound || "\u1B1F\u1B44\u1B2D" == b.CoreSound || "\u1B17\u1B44\u1B2D" == b.CoreSound || "\u1B1C\u1B44\u1B2D" == b.CoreSound ? (d = b.CoreSound, "\u1B44" == c && (c = "")) : "\u1B2E\u1B2E\u1B44\u1B2E" == b.CoreSound ? d = "\u1B2E\u1B44\u1B2E" : "\u1B03\u1B03\u1B2D" == b.CoreSound ? d = "\u1B03\u1B2D" : "\u1B03\u1B03\u1B33" == b.CoreSound ? d = "\u1B03\u1B33" : "\u1B03\u1B03\u1B2E" == b.CoreSound ? d = "\u1B03\u1B2E" : "\u1B03\u1B03\u1B2F" == b.CoreSound ? vowelPrev && (d = "\u1B03\u1B2F") : "\u1B03\u1B03\u1B18" == b.CoreSound ? d = "\u1B03\u1B18" : "\u1B04\u1B04\u1B33" == b.CoreSound ? d = "\u1B04\u1B33" : "\u1B04\u1B04\u1B2E" == b.CoreSound ? vowelPrev && (d = "\u1B04\u1B2E") : "\u1B04\u1B04\u1B2F" == b.CoreSound ? vowelPrev && (d = "\u1B04\u1B2F") : "\u1B04\u1B33" == b.CoreSound ? vowelPrev && (d = "\u1B04\u1B2C") : "\u1B04\u1B04" == b.CoreSound ? d = "\u1B33\u1B44\u1B2D" : "\u1B04\u1B04\u1B44\u1B2D" == b.CoreSound ? "\u1B42" == c && (d = "\u1B33") : "\u1B04\u1B33\u1B44\u1B2D" == b.CoreSound ? "\u1B42" == c && (d = "\u1B33") : "\u1B04" == b.CoreSound && "\u1B44" == c ? d = "\u1B33" : "\u1B04" == b.CoreSound && "\u1B44" != c ? d = "\u1B33" : "\u1B03" == b.CoreSound && "\u1B42" == c ? (d = "\u1B0B", c = "") : "\u1B03" == b.CoreSound && "\u1B44" != c ? d = "\u1B2D" : "\u1B02" == b.CoreSound && "\u1B44" != c ? d = "\u1B17" : "\u1B02" == b.CoreSound && "\u1B44" == c ? (d = "\u1B02", c = "") : d = b.CoreSound, "" + d + c } function DoTransliterate(a) { var b = 0, c = "", d = 0, e = !1; for (startVowel = !1, a = SuperTrim(a); b < a.length;)0 < b && isVowel(a[b]) && isVowel(a[b - 1]) && (a = a.substring(0, b) + "\u200B" + a.substring(b, a.length)), isSpecial(a[b]) && !e || ("h" == a[b] && e || !isVowel(a[b]) && 0 < b || " " == a[b] || isPunct(a[b]) || isDigit(a[b]) || 5 < b - d ? (c += GetSound(a.substring(d, b)), " " == a[b] && (c += " "), isPunct(a[b]) ? (c += a[b], d = b + 1) : d = b, e = !1) : isVowel(a[b]) && "h" != a[b] && (e = !0)), vowelPrev = !!(0 < d && isVowel(a[d - 1])), b++; return d < b && (c += GetSound(a.substring(d, b))), SuperTrim(c) }